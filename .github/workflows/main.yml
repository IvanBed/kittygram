name: Enhanced CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          python -m unittest discover -s tests

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_backend ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway ./nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          DOCKER_HOST: ssh://${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}
        run: |
          # Добавляем приватный ключ в агент
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          eval "$(ssh-agent -s)"

          # Разблокируем ключ, используя пароль
          echo "$SSH_PASSPHRASE" | ssh-add private_key

      - name: SSH into server and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /kittygram
            docker-compose pull
            docker-compose up -d --build
            docker-compose exec backend python manage.py migrate
            docker-compose exec backend python manage.py collectstatic --noinput
          EOF

  server_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run server tests
        run: |
          cd backend
          pytest